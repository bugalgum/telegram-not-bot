from db import init_db, add_note, get_notes
from db import delete_note_by_index, clear_notes
from telegram import Update
from telegram.ext import ApplicationBuilder, CommandHandler, ContextTypes
import logging

# –î–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –∑–∞–º–µ—Ç–æ–∫ –≤ –æ–ø–µ—Ä–∞—Ç–∏–≤–Ω–æ–π –ø–∞–º—è—Ç–∏ (–ø–æ–∫–∞ –±–µ–∑ –±–∞–∑—ã)
–∑–∞–º–µ—Ç–∫–∏ = {}

# –í–∫–ª—é—á–∞–µ–º –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ (–ø–æ–ª–µ–∑–Ω–æ)
logging.basicConfig(level=logging.INFO)

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text("–ü—Ä–∏–≤–µ—Ç! –Ø –±–æ—Ç –¥–ª—è –∑–∞–º–µ—Ç–æ–∫. –ò—Å–ø–æ–ª—å–∑—É–π /add —á—Ç–æ–±—ã –¥–æ–±–∞–≤–∏—Ç—å, /list —á—Ç–æ–±—ã –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å.")

async def add(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id
    —Ç–µ–∫—Å—Ç = " ".join(context.args)
    if not —Ç–µ–∫—Å—Ç:
        await update.message.reply_text("‚ùå –¢—ã –Ω–µ —É–∫–∞–∑–∞–ª —Ç–µ–∫—Å—Ç –∑–∞–º–µ—Ç–∫–∏.")
        return

    add_note(user_id, —Ç–µ–∫—Å—Ç)
    await update.message.reply_text("‚úÖ –ó–∞–º–µ—Ç–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞!")

async def list_notes(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id
    user_notes = get_notes(user_id)
    if not user_notes:
        await update.message.reply_text("–£ —Ç–µ–±—è –ø–æ–∫–∞ –Ω–µ—Ç –∑–∞–º–µ—Ç–æ–∫.")
    else:
        —Ç–µ–∫—Å—Ç = "\n".join([f"{i+1}. {n}" for i, n in enumerate(user_notes)])
        await update.message.reply_text(f"üìù –¢–≤–æ–∏ –∑–∞–º–µ—Ç–∫–∏:\n{—Ç–µ–∫—Å—Ç}")
        
async def delete_note(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id
    if not context.args or not context.args[0].isdigit():
        await update.message.reply_text("‚ùå –£–∫–∞–∂–∏ –Ω–æ–º–µ—Ä –∑–∞–º–µ—Ç–∫–∏. –ü—Ä–∏–º–µ—Ä: /delete 2")
        return

    index = int(context.args[0]) - 1
    success = delete_note_by_index(user_id, index)
    if success:
        await update.message.reply_text("üóë –ó–∞–º–µ—Ç–∫–∞ —É–¥–∞–ª–µ–Ω–∞.")
    else:
        await update.message.reply_text("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –Ω–æ–º–µ—Ä –∑–∞–º–µ—Ç–∫–∏.")

async def clear_all_notes(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id
    clear_notes(user_id)
    await update.message.reply_text("üßπ –í—Å–µ —Ç–≤–æ–∏ –∑–∞–º–µ—Ç–∫–∏ —É–¥–∞–ª–µ–Ω—ã.")
    
from db import init_db, add_note, get_notes

init_db()

from os import getenv
app = ApplicationBuilder().token(getenv("BOT_TOKEN")).build()

app.add_handler(CommandHandler("start", start))
app.add_handler(CommandHandler("add", add))
app.add_handler(CommandHandler("list", list_notes))
app.add_handler(CommandHandler("delete", delete_note))
app.add_handler(CommandHandler("clear", clear_all_notes))

app.run_polling()
